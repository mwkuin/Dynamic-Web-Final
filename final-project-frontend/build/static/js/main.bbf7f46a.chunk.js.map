{"version":3,"sources":["components/CreateAccountForm.js","pages/CreateAccount.js","components/Header.js","components/CreatePostForm.js","pages/Home.js","components/LoginForm.js","pages/Login.js","pages/SinglePost.js","App.js","serviceWorker.js","index.js"],"names":["CreateAccountForm","CreateAccountFunction","className","onSubmit","e","htmlFor","type","name","CreateAccount","Header","LogoutFunction","isLoggedIn","href","onClick","CreatePostForm","createPostFunction","Home","userInfo","useState","allPosts","setAllPosts","email","uid","useEffect","axios","get","then","response","data","catch","error","console","log","preventDefault","text","currentTarget","postText","value","idFromText","replace","toLowerCase","substr","userId","map","post","i","key","id","LoginForm","LoginFunction","Login","SinglePost","postData","setPostData","useParams","App","loggedIn","setLoggedIn","loading","setLoading","setUserInfo","firebaseConfig","apiKey","authDomain","databaseURL","projectId","storageBucket","messagingSenderId","appId","firebase","length","setPersistence","Auth","Persistence","SESSION","onAuthStateChanged","user","signOut","exact","path","to","loginEmail","password","loginPassword","signInWithEmailAndPassword","createEmail","createPassword","createUserWithEmailAndPassword","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","registration","unregister","message"],"mappings":"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","file":"static/js/main.bbf7f46a.chunk.js","sourcesContent":["import React from \"react\";\n\nfunction CreateAccountForm( {CreateAccountFunction} ) {\n  return (\n    <div>\n      <form className=\"Form SignupForm\" onSubmit={(e) => CreateAccountFunction(e)}>\n        <label htmlFor=\"createEmail\">Email</label>\n        <input type=\"email\" name=\"createEmail\" />\n        <label htmlFor=\"createPassword\">Password</label>\n        <input type=\"password\" name=\"createPassword\" />\n        <button>Create Account</button>\n      </form>\n    </div>\n  );\n}\n\nexport default CreateAccountForm;\n","import React from \"react\";\n//Components\nimport CreateAccountForm from '../components/CreateAccountForm';\n\nfunction CreateAccount( {CreateAccountFunction} ) {\n  return (\n    <div className=\"Wrapper\">\n      <h1>Create Account</h1>\n      <div className=\"CreateWrapper\">\n        <CreateAccountForm CreateAccountFunction={CreateAccountFunction} />\n        <div className=\"CreateInformation\">\n          <h2>About Logo Site</h2>\n          <p>A space to get your thoughts out of your head. No musing is too big or too small.</p>\n        </div>\n      </div>\n    </div>\n  );\n}\n\nexport default CreateAccount;\n","import React from 'react';\n\nfunction Header( {LogoutFunction, isLoggedIn} ) {\n    return (\n        <header className=\"Header\">\n          <div className=\"Header_Wrapper\">\n            <div className=\"Header_Logo\">\n              Musings.\n            </div>\n              <nav className=\"Header_Nav\">\n                  {isLoggedIn && <a href=\"/\">Profile</a>}\n                  {!isLoggedIn && <a href=\"/create-account\">Create Account</a> }\n                  {!isLoggedIn && <a href=\"/login\">Login</a> }\n                  {isLoggedIn && <a onClick={() => LogoutFunction()}>Log Out</a>}\n              </nav>\n            </div>\n        </header>\n    );\n}\n\nexport default Header;\n","import React from \"react\";\n\nfunction CreatePostForm( {createPostFunction} ) {\n  return (\n\n      <form className=\"Form CreatePostForm\" onSubmit={(e) => createPostFunction(e)}>\n        <label htmlFor=\"postText\">Text</label>\n        <input type=\"text\" name=\"postText\" />\n        <button>Submit</button>\n      </form>\n\n  );\n}\n\nexport default CreatePostForm;\n","import React, { useEffect, useState } from \"react\";\nimport axios from \"axios\";\n//Components\nimport CreatePostForm from '../components/CreatePostForm'\n\nfunction Home( {userInfo} ) {\n  const [allPosts, setAllPosts] = useState([]);\n  const email = userInfo.email;\n  const uid = userInfo.uid;\n\n  useEffect(() => {\n\n    axios\n      .get(\n       //My API endpoint\n       //Local:\n      // `http://localhost:4000`\n      //Production:\n      `https://afternoon-river-65662.herokuapp.com/`\n      )\n      .then(function (response) {\n        // handle success\n        setAllPosts(response.data);\n      })\n      .catch(function (error) {\n        // handle error\n        console.log(error);\n      });\n\n  }, []);\n\n//Create a Post\n  function createPostFunction(e) {\n    e.preventDefault();\n    let text = e.currentTarget.postText.value;\n    let idFromText = text.replace(/\\s+/g, \"-\").toLowerCase().substr(0,16);\n    let userId = uid;\n\n    axios\n      .get(\n       //My API endpoint\n       //Local:\n      // `http://localhost:4000/create?text=${text}&id=${idFromText}&userId=${userId}`\n      //Production:\n      `https://afternoon-river-65662.herokuapp.com/create?text=${text}&id=${idFromText}&userId=${userId}`\n      )\n      .then(function (response) {\n        // handle success\n        console.log('response', response);\n      })\n      .catch(function (error) {\n        // handle error\n        console.log(error);\n      });\n\n  }\n\n  return (\n\n    <div className=\"Wrapper\">\n      <h1>Welcome, {email}</h1>\n      <div className=\"CreatePost\">\n        <h2>Let your thoughts out</h2>\n        <CreatePostForm createPostFunction={createPostFunction}/>\n      </div>\n      <div className=\"\">\n        <h2>All Musings</h2>\n        {allPosts.map((post, i) => (\n          <p key={i}>\n            <a href={`/post/${post.id}`}>{post.text}</a>\n          </p>\n        ))}\n      </div>\n    </div>\n  )\n};\n\nexport default Home;\n","import React from \"react\";\n\nfunction LoginForm( {LoginFunction} ) {\n\n  return (\n      <form className=\"Form LoginForm\" onSubmit={(e) => LoginFunction(e)}>\n        <label htmlFor=\"loginEmail\">Email</label>\n        <input type=\"email\" name=\"loginEmail\" />\n        <label htmlFor=\"loginPassword\">Password</label>\n        <input type=\"password\" name=\"loginPassword\" />\n        <button>Submit</button>\n      </form>\n  );\n}\n\nexport default LoginForm;\n","import React from \"react\";\n//Components\nimport LoginForm from '../components/LoginForm';\n\nfunction Login( {LoginFunction} ) {\n  return (\n    <div className=\"Wrapper\">\n      <h1>Login</h1>\n      <LoginForm LoginFunction={LoginFunction} />\n    </div>\n  )\n};\n\nexport default Login;\n","import React, {useState, useEffect } from \"react\";\nimport { useParams } from \"react-router-dom\";\nimport axios from 'axios';\n\nfunction SinglePost() {\n  const [postData, setPostData] = useState({});\n\n  const { id } = useParams();\n\n  useEffect(() => {\n    axios\n      .get(\n       //My API endpoint\n       //Local:\n      // `http://localhost:4000/post/${id}`\n      //Production:\n      `https://afternoon-river-65662.herokuapp.com/post/${id}`\n      )\n      .then(function (response) {\n        // handle success\n        setPostData(response.data);\n      })\n      .catch(function (error) {\n        // handle error\n        console.log(error);\n      });\n\n  }, []);\n\n  return <div className=\"SinglePost Wrapper\">\n  <p>{postData.text}</p>\n\n  </div>;\n}\n\nexport default SinglePost;\n","import React, { useEffect, useState } from 'react';\nimport { Route, BrowserRouter as Router, Redirect } from 'react-router-dom';\nimport * as firebase from 'firebase/app';\nimport \"firebase/auth\";\n\n//Pages\nimport CreateAccount from \"./pages/CreateAccount\";\nimport Header from \"./components/Header\";\nimport Home from \"./pages/Home\";\nimport Login from \"./pages/Login\";\nimport SinglePost from \"./pages/SinglePost\";\n\n\n//Styles\nimport './App.css';\n\nfunction App() {\n  const [loggedIn, setLoggedIn] = useState(false);\n  const [loading, setLoading] = useState(true);\n  const [userInfo, setUserInfo] = useState({});\n\n//Config\n  const firebaseConfig = {\n      apiKey: \"AIzaSyCLBJ4w65_RjpE54Sq9ujOtlBRVFIeG6AY\",\n      authDomain: \"final-project-37ede.firebaseapp.com\",\n      databaseURL: \"https://final-project-37ede.firebaseio.com\",\n      projectId: \"final-project-37ede\",\n      storageBucket: \"final-project-37ede.appspot.com\",\n      messagingSenderId: \"200354381478\",\n      appId: \"1:200354381478:web:9450e6350274fc268f3e67\"\n    };\n\n    //ensure app is initialized when it is ready to be\n    useEffect(() => {\n      //ensure app is not initialized more than once\n      //is firebase already initialized?\n      if(!firebase.apps.length) {\n        firebase.initializeApp(firebaseConfig);\n      }\n    //Setting auth to be persistent in SESSION storage, not cookies\n    //You can also use cookies with firebase but we're using session\n    //because it is easier to work with\n    firebase\n      .auth()\n      .setPersistence(firebase.auth.Auth.Persistence.SESSION)\n      .catch(function(e) {\n        console.log('AUTH ERROR', e);\n      });\n    }, [firebaseConfig]);\n\n\n    //Check to see if user is logged in\n    //User loads page, check status -> set state accordingly\n    useEffect(() => {\n      firebase.auth().onAuthStateChanged(function (user) {\n      if(user) {\n        //Logged in\n        setUserInfo(user);\n        setLoggedIn(true);\n      } else {\n        //Not logged in\n        setUserInfo({});\n        setLoggedIn(false);\n      }\n        setLoading(false);\n      });\n      }, []);\n\n      //Login\n      function LoginFunction(e) {\n        e.preventDefault();\n        let email = e.currentTarget.loginEmail.value;\n        let password = e.currentTarget.loginPassword.value;\n\n        firebase\n        .auth()\n        .signInWithEmailAndPassword(email, password)\n        .then(function(response) {\n          console.log(\"LOGIN RESPONSE\", response);\n          setLoggedIn(true);\n        })\n        .catch(function(error) {\n          console.log(\"LOGIN ERROR\", error)\n        });\n      }\n\n      //Logout\n      function LogoutFunction() {\n        firebase\n          .auth()\n          .signOut()\n          .then(function() {\n            setLoggedIn(false);\n          })\n          .catch(function(error) {\n            console.log(\"LOGOUT ERROR\", error);\n          });\n      }\n\n      function CreateAccountFunction(e) {\n        e.preventDefault();\n        console.log('form payload', e);\n\n        //default values for testing\n        let email = e.currentTarget.createEmail.value;\n        let password = e.currentTarget.createPassword.value;\n\n\n        firebase\n          .auth()\n          .createUserWithEmailAndPassword(email, password)\n          .then(function(response) {\n            console.log('VALID ACCOUNT CREATE', response);\n            setLoggedIn(true);\n          })\n          .catch(function(e) {\n            console.log(\"CREATE ACCOUNT ERROR\", e);\n          });\n\n      }\n      if (loading) return null;\n\n  return (\n    <div className=\"App\">\n      <Header LogoutFunction={LogoutFunction} isLoggedIn={loggedIn}/>\n      <Router>\n        <Route exact path=\"/\">\n          {!loggedIn ? (<Redirect to=\"/login\"/> ) : (<Home userInfo={userInfo}/>)}\n        </Route>\n        <Route exact path=\"/post/:id\">\n          {!loggedIn ? (<Redirect to=\"/login\"/> ) : (<SinglePost/>)}\n        </Route>\n        <Route exact path=\"/login\">\n          {!loggedIn ? (<Login LoginFunction={LoginFunction}/> ) : (<Redirect to=\"/\"/>)}\n        </Route>\n\n        <Route exact path=\"/create-account\">\n          {!loggedIn ? (<CreateAccount CreateAccountFunction={CreateAccountFunction} />) : (<Redirect to=\"/\" />)}\n        </Route>\n      </Router>\n\n\n\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}